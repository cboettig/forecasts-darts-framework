---
pagetitle: aquatics
toc-title: Table of contents
format: gfm
---



Note that BARC has 5 different depth temperatures, though only two in recent data. CRAM also has 2 depths.  Stream sites POSE, COMO, MCDI have no depth.  oxygen_depth varies even more!

```{r message=FALSE, warning=FALSE}
## simplify the data (could be done in python)
library(tidyverse)
aquatics <- read_csv("https://data.ecoforecast.org/targets/aquatics/aquatics-targets.csv.gz") 
aquatics <- aquatics |> 
  select(!contains(c("depth", "sd"))) |> 
  group_by(time, siteID) |> 
  summarise(across(!any_of(c("time", "siteID")), .fns = mean, na.rm=TRUE),
            .groups="drop")


## consider GP-fill since python is failing to do that?

write_csv(aquatics, "aquatics-targets.csv.gz")

aquatics |> select(siteID) |> distinct() |> pull(siteID)
```


Okay, now here we go


``` {python}
import numpy as np
import matplotlib.pyplot as plt
from darts.models import ExponentialSmoothing, Prophet, AutoARIMA, Theta

# GPU configuration
import os
os.environ["CUDA_VISIBLE_DEVICES"] = "0"
pl_trainer_kwargs={"accelerator": "gpu", "gpus": 1, "auto_select_gpus": True} 
```


``` {python}
# Helper functions

import pandas as pd
from darts import TimeSeries


#FIXME can darts.TimeSeries have multiple variables? multiple sites?

def ts_parser(df, siteID = "BARC", variable = "temperature"):
   df = df[df["siteID"] == siteID]
   # df = df[df["depth_temperature"] == 0.55]
   df = df[['time', variable]]
   series = TimeSeries.from_dataframe(df, time_col = 'time', value_cols = variable, fill_missing_dates = True, freq = 'D')
   return(series)
 
#FIXME can we handle multiple variables?
def efi_format(pred, site_id, variable):
  nd = pred.all_values() # numpy nd-array
  nd.shape # time x variables x replicates
  # index the first variable
  var1 = nd[:,0,:]
  var1.shape # time x replicate -- 2D array can be converted to DataFrame
  
  df = pd.DataFrame(var1)
  df['time'] = pred.time_index
  # pivot longer, ensemble as id, not as column name
  df = df.melt(id_vars="time", var_name="ensemble", value_name="value")
  
  df['variable'] = variable # "temperature"
  df['site_id'] = site_id # "BART"
  return(df)


from datetime import date
def forecast_csv(df, team = "cb_prophet"):
  today = date.today()
  team = "cb_prophet"
  filename = "aquatics" + "-" + today.strftime("%Y-%m-%d") + "-" + team +  ".csv.gz"
  df.to_csv(filename, index=False)

```


``` {python}
horizon = 14


dev_test = False
aquatics = pd.read_csv("aquatics-targets.csv.gz")
sites = aquatics["siteID"].unique()
variables = ["temperature", "oxygen", "chla"]

full = pd.DataFrame()

# Note: still specific to old format targets file
for variable in variables:
  for site_id in sites:
    train = ts_parser(aquatics, site_id, variable)
    
    ## development purposes only, production runs will use all available data
    if dev_test:
      train, val = train.split_before(0.75)
      horizon = len(val)
    
    model = Prophet() # ExponentialSmoothing(), AutoARIMA(), Theta()
    model.fit(train)
    forecast = model.predict(horizon, num_samples=500)
    df = efi_format(forecast, site_id, variable)
    full = pd.concat([full,df])

forecast_csv(full, "cb_prophet")
```

```{r}
neon4cast::submit("aquatics-2022-06-15-cb_prophet.csv.gz")
```


## Compare

```{r}
fc <- read_csv("aquatics-2022-06-15-cb_prophet.csv.gz")

observed <- 
  aquatics |> 
  rename(site_id = siteID) |>
  pivot_longer(c("temperature", "oxygen", "chla"), names_to = "variable", values_to="observed") 

fc_summary <- fc |> 
  group_by(variable, site_id, time) |> 
  summarise(mean = mean(value), sd = sd(value))


var <- "temperature"
fc_summary |> filter(variable == var) |> 
  ggplot(aes(time)) + 
  geom_ribbon(aes(y=mean, ymin=mean-2*sd, ymax=mean+2*sd), alpha=0.2, fill="blue") +
  geom_line(aes(y=mean), col="blue", alpha=.5) + 
  geom_point(aes(time, observed), shape = ".", data = filter(observed, variable==var)) + 
  facet_wrap(~site_id, scales="free")


var <- "oxygen"
fc_summary |> filter(variable == var) |> 
  ggplot(aes(time)) + 
  geom_ribbon(aes(y=mean, ymin=mean-2*sd, ymax=mean+2*sd), alpha=0.2, fill="blue") +
  geom_line(aes(y=mean), col="blue", alpha=.5) + 
  geom_point(aes(time, observed), shape = ".", data = filter(observed, variable==var)) + 
  facet_wrap(~site_id, scales="free")


var <- "chla"
fc_summary |> filter(variable == var) |> 
  ggplot(aes(time)) + 
  geom_ribbon(aes(y=mean, ymin=mean-2*sd, ymax=mean+2*sd), alpha=0.2, fill="blue") +
  geom_line(aes(y=mean), col="blue", alpha=.5) + 
  geom_point(aes(time, observed), shape = ".", data = filter(observed, variable==var)) + 
  facet_wrap(~site_id, scales="free")

#  facet_grid(variable~site_id, scales="free")






```


